/*>>> FAXMACHINE <<<*/

var application_base64 = "PGh0bWw+CiAgPGhlYWQ+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHA6Ly93aW5kb3dzOTMubmV0L2Mvc3lzL3NraW5zL3c5My5jc3M/dj0yLjMuOCI+CiAgPC9oZWFkPgogIDxib2R5IHN0eWxlPSJtYXJnaW46IDA7IGZvbnQtc2l6ZTogMTJweCI+CiAgICA8ZGl2IHN0eWxlPSJ3aWR0aDogNDg0cHg7IGhlaWdodDogNzQwcHg7IGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUE7Ij4KICAgICAgPGNhbnZhcyB3aWR0aD0iNDgwIiBoZWlnaHQ9IjQ4MCIgc3R5bGU9IndpZHRoOiA0ODBweDsgaGVpZ2h0OiA0ODBweDsgYm9yZGVyOiAycHggaW5zZXQ7IiBpZD0idm94ZWxzY3JlZW4iPjwvY2FudmFzPgogICAgICA8ZGl2IHN0eWxlPSJvdmVyZmxvdy15OiBhdXRvOyB3aWR0aDogNDgwcHg7IGhlaWdodDogMjUwcHg7IG1hcmdpbi10b3A6IDJweDsgYm9yZGVyOiAycHggaW5zZXQ7Ij4KICAgICAgICA8ZGl2PgogICAgICAgICAgPHNwYW4+IEZPVjogPC9zcGFuPiA8aW5wdXQgdHlwZT0icmFuZ2UiIG1heD0iMTIwIiB2YWx1ZT0iOTAiIGlkPSJmb3YiIHN0eWxlPSJ3aWR0aDogMzYwcHg7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogMTAwcHg7Ij4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2PgogICAgICAgICAgPHNwYW4+IERJU1Q6IDwvc3Bhbj4gPGlucHV0IHR5cGU9InJhbmdlIiBtYXg9IjYiIHZhbHVlPSIyIiBpZD0iZGlzdCIgc3R5bGU9IndpZHRoOiAzNjBweDsgcG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiAxMDBweDsiPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXY+CiAgICAgICAgICA8c3Bhbj4gWS1QT1M6IDwvc3Bhbj4gPGlucHV0IHR5cGU9InJhbmdlIiBtYXg9IjE2IiB2YWx1ZT0iMCIgaWQ9Inlwb3MiIHN0eWxlPSJ3aWR0aDogMzYwcHg7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogMTAwcHg7Ij4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2PjwvZGl2PgogICAgICAgIDxocj4KICAgICAgICA8ZGl2PgogICAgICAgICAgPHNwYW4+IFJHQiBzbGlkZXJzIGZvciB0aWxlIGNvbG9yOiBbPC9zcGFuPjxzcGFuIGlkPSJzaG93X2NvbG9yIiBzdHlsZT0iZm9udC13ZWlnaHQ6IDEwMDA7IGJhY2tncm91bmQtY29sb3I6ICMwMDAwZmY7IHdpZHRoOiAxMHB4OyI+JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7PC9zcGFuPjxzcGFuPl08L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxzcGFuPiBSZWQ6IDwvc3Bhbj4gPGlucHV0IHR5cGU9InJhbmdlIiBtYXg9IjI1NSIgdmFsdWU9IjAiIGlkPSJyZWQiIHN0eWxlPSJ3aWR0aDogMzYwcHg7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogMTAwcHg7Ij4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2PgogICAgICAgICAgPHNwYW4+IEdyZWVuOiA8L3NwYW4+IDxpbnB1dCB0eXBlPSJyYW5nZSIgbWF4PSIyNTUiIHZhbHVlPSIwIiBpZD0iZ3JlZW4iIHN0eWxlPSJ3aWR0aDogMzYwcHg7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogMTAwcHg7Ij4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2PgogICAgICAgICAgPHNwYW4+IEJsdWU6IDwvc3Bhbj4gPGlucHV0IHR5cGU9InJhbmdlIiBtYXg9IjI1NSIgdmFsdWU9IjI1NSIgaWQ9ImJsdWUiIHN0eWxlPSJ3aWR0aDogMzYwcHg7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogMTAwcHg7Ij4KICAgICAgICA8L2Rpdj4KICAgICAgICA8aHI+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxidXR0b24gaWQ9InNhdmUiIHN0eWxlPSJ3aWR0aDogY2FsYygxMDAlIC0gMTBweCk7IG1hcmdpbi1sZWZ0OiA1cHg7IGJvcmRlcjogMnB4IG91dHNldDsgb3V0bGluZTogbm9uZTsiPlNBVkU8L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24gaWQ9Im9wZW4iIHN0eWxlPSJ3aWR0aDogY2FsYygxMDAlIC0gMTBweCk7IG1hcmdpbi1sZWZ0OiA1cHg7IGJvcmRlcjogMnB4IG91dHNldDsgb3V0bGluZTogbm9uZTsiPk9QRU48L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24gaWQ9ImNsZWFyIiBzdHlsZT0id2lkdGg6IGNhbGMoMTAwJSAtIDEwcHgpOyBtYXJnaW4tbGVmdDogNXB4OyBib3JkZXI6IDJweCBvdXRzZXQ7IG91dGxpbmU6IG5vbmU7Ij5DTEVBUjwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPHNjcmlwdCBuYW1lPSJlbmdpbmUiPgogICAgICAvKiA+Pj4gRiBBIFggTSBBIEMgSCBJIE4gRSA8PDwgKi8KCiAgICAgIGNvbnN0IFdJRFRIID0gNDgwLCBIRUlHSFQgPSA0ODA7CgogICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZveGVsc2NyZWVuJyk7CiAgICAgIHZhciBvZnNjciA9ICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTsKICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogICAgICB2YXIgb2ZjID0gb2ZzY3IuZ2V0Q29udGV4dCgnMmQnKTsKCiAgICAgIGN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTsKICAgICAgLy9jdHguc2NhbGUoMiwgMik7CgogICAgICBvZnNjci53aWR0aCA9IFdJRFRIOwogICAgICBvZnNjci5oZWlnaHQgPSBIRUlHSFQ7CgogICAgICAvKiBmdW5jdGlvbiBmb3IgZHJhd2luZyA0LXNpZGVkIHBvbHlnb25zICovCgogICAgICBmdW5jdGlvbiBkcmF3cG9seShwMSwgcDIsIHA0LCBwMywgY29sb3IpIHsKICAgICAgICBvZmMuZmlsbFN0eWxlID0gY29sb3I7CiAgICAgICAgb2ZjLmJlZ2luUGF0aCgpOwogICAgICAgIG9mYy5tb3ZlVG8ocDEueCwgcDEueSk7CiAgICAgICAgb2ZjLmxpbmVUbyhwMy54LCBwMy55KTsKICAgICAgICBvZmMubGluZVRvKHA0LngsIHA0LnkpOwogICAgICAgIG9mYy5saW5lVG8ocDIueCwgcDIueSk7CiAgICAgICAgb2ZjLmNsb3NlUGF0aCgpOwogICAgICAgIG9mYy5maWxsKCk7CiAgICAgICAgb2ZjLmJlZ2luUGF0aCgpOwogICAgICAgIG9mYy5tb3ZlVG8ocDEueCwgcDEueSk7CiAgICAgICAgb2ZjLmxpbmVUbyhwMy54LCBwMy55KTsKICAgICAgICBvZmMubW92ZVRvKHAzLngsIHAzLnkpOwogICAgICAgIG9mYy5saW5lVG8ocDQueCwgcDQueSk7CiAgICAgICAgb2ZjLm1vdmVUbyhwNC54LCBwNC55KTsKICAgICAgICBvZmMubGluZVRvKHAyLngsIHAyLnkpOwogICAgICAgIG9mYy5tb3ZlVG8ocDIueCwgcDIueSk7CiAgICAgICAgb2ZjLmxpbmVUbyhwMS54LCBwMS55KTsKICAgICAgICBvZmMuY2xvc2VQYXRoKCk7CiAgICAgICAgb2ZjLnN0cm9rZSgpOwogICAgICB9CgogICAgICBjbGFzcyBQb2ludDJEIHsKCiAgICAgICAgY29uc3RydWN0b3IoeCwgeSkgewoKICAgICAgICAgIHRoaXMueCA9IHg7CiAgICAgICAgICB0aGlzLnkgPSB5OwogICAgICAgIH0KICAgICAgfQoKICAgICAgY2xhc3MgUG9pbnQzRCB7CgogICAgICAgIGNvbnN0cnVjdG9yKHgsIHksIHopIHsKCiAgICAgICAgICB0aGlzLnggPSB4OwogICAgICAgICAgdGhpcy55ID0geTsKICAgICAgICAgIHRoaXMueiA9IHo7CiAgICAgICAgfQogICAgICB9CgogICAgICBjbGFzcyBQbGFpbiB7CgogICAgICAgIGNvbnN0cnVjdG9yKHAxLCBwMiwgcDMsIHA0LCBjb2xvciwgcG9zMSwgcG9zMikgewoKICAgICAgICAgIHRoaXMucCA9IFtwMSwgcDIsIHAzLCBwNF07CgogICAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yOwoKICAgICAgICAgIHRoaXMucG9zMSA9IHBvczE7CgogICAgICAgICAgdGhpcy5wb3MyICA9IHBvczI7CiAgICAgICAgfQogICAgICB9CgogICAgICBmdW5jdGlvbiByb3RhdGUoeCwgeSwgYW5nbGUpIHsKCiAgICAgICAgcmV0dXJuIFt4ICogYW5nbGUuY29zIC0geSAqIGFuZ2xlLnNpbiwgeCAqIGFuZ2xlLnNpbiArIHkgKiBhbmdsZS5jb3NdOwogICAgICB9CgogICAgICBmdW5jdGlvbiByb3RhdGUzZCh4LCB5LCB6LCBsciwgdWQpIHsKCiAgICAgICAgW3gsIHpdID0gcm90YXRlKHgsIHosIGxyKTsKCiAgICAgICAgW3ksIHpdID0gcm90YXRlKHksIHosIHVkKTsKCiAgICAgICAgcmV0dXJuIFt4LCB5LCB6XTsKICAgICAgfQoKICAgICAgLyoKCiAgICAgIG5ldyBDYW1lcmEoIDxOdW1iZXIgPSBmaWVsZCBvZiB2aWV3PiApIHJldHVybnMgQ2FtZXJhCgogICAgICBDYW1lcmEucm90YXRlKCA8TnVtYmVyID0gbGVmdC1yaWdodCByb3RhdGlvbj4sIDxOdW1iZXIgPSB1cC1kb3duIHJvdGF0aW9uPiApIHJldHVybnMgdm9pZAoKICAgICAgQ2FtZXJhLnByb2plY3QoIDxQb2ludDNEPiApIHJldHVybnMgUG9pbnQyRAoKICAgICAgQ2FtZXJhLnNldEZvdiggPE51bWJlciA9IGZpZWxkIG9mIHZpZXc+ICkKCiAgICAgICovCgogICAgICBjbGFzcyBDYW1lcmEgewoKICAgICAgICBjb25zdHJ1Y3Rvcihmb3YsIGRpc3QpIHsKCiAgICAgICAgICB0aGlzLmNzeiA9IDAuNiAvIDg7CiAgICAgICAgICB0aGlzLnRvcCA9IDA7CgogICAgICAgICAgdGhpcy5yb3RMUiA9IHt2YWw6IDAsIHNpbjogMCwgY29zOiAxfTsKICAgICAgICAgIHRoaXMucm90VUQgPSB7dmFsOiAwLCBzaW46IDAsIGNvczogMX07CgogICAgICAgICAgdGhpcy5kaXN0ID0gZGlzdDsKICAgICAgICAgIHRoaXMuZm92X2N0ZyA9IDEgLyBNYXRoLnRhbihmb3YgKiBNYXRoLlBJIC8gMzYwKTsKICAgICAgICB9CgogICAgICAgIHJvdGF0ZSh4eiwgeXopIHsKCiAgICAgICAgICB0aGlzLnJvdExSLnZhbCAtPSB4ejsKICAgICAgICAgIHRoaXMucm90VUQudmFsIC09IHl6OwoKICAgICAgICAgIHRoaXMucm90TFIuc2luID0gTWF0aC5zaW4odGhpcy5yb3RMUi52YWwpOwogICAgICAgICAgdGhpcy5yb3RMUi5jb3MgPSBNYXRoLmNvcyh0aGlzLnJvdExSLnZhbCk7CiAgICAgICAgICB0aGlzLnJvdFVELnNpbiA9IE1hdGguc2luKHRoaXMucm90VUQudmFsKTsKICAgICAgICAgIHRoaXMucm90VUQuY29zID0gTWF0aC5jb3ModGhpcy5yb3RVRC52YWwpOwogICAgICAgIH0KCiAgICAgICAgc2V0Rm92KGZvdikgewoKICAgICAgICAgIHRoaXMuZm92X2N0ZyA9IDEgLyBNYXRoLnRhbihmb3YgKiBNYXRoLlBJIC8gMzYwKTsKICAgICAgICB9CgogICAgICAgIHByb2plY3QocDNkKSB7CgogICAgICAgICAgdmFyIHggPSAocDNkLnggLSA4KSAqIHRoaXMuY3N6OwogICAgICAgICAgdmFyIHkgPSAodGhpcy50b3AgLSBwM2QueSkgKiB0aGlzLmNzejsKICAgICAgICAgIHZhciB6ID0gKHAzZC56IC0gOCkgKiB0aGlzLmNzejsKCiAgICAgICAgICBbeCwgeSwgel0gPSByb3RhdGUzZCh4LCB5LCB6LCB0aGlzLnJvdExSLCB0aGlzLnJvdFVEKTsKCiAgICAgICAgICB6ICs9IHRoaXMuZGlzdDsKCiAgICAgICAgICB2YXIgZCA9IHRoaXMuZm92X2N0ZyAvIHo7CgogICAgICAgICAgcmV0dXJuIG5ldyBQb2ludDJEKFdJRFRIICogKDAuNSArIHggKiBkKSwgSEVJR0hUICogKDAuNSArIHkgKiBkKSk7CiAgICAgICAgfQoKICAgICAgICBnZXREaXN0KHAzZCkgewoKICAgICAgICAgIHZhciB4ID0gKHAzZC54IC0gOCkgKiB0aGlzLmNzejsKICAgICAgICAgIHZhciB5ID0gKHRoaXMudG9wIC0gcDNkLnkpICogdGhpcy5jc3o7CiAgICAgICAgICB2YXIgeiA9IChwM2QueiAtIDgpICogdGhpcy5jc3o7CgogICAgICAgICAgW3gsIHksIHpdID0gcm90YXRlM2QoeCwgeSwgeiwgdGhpcy5yb3RMUiwgdGhpcy5yb3RVRCk7CgogICAgICAgICAgeiArPSB0aGlzLmRpc3Q7CgogICAgICAgICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejsKICAgICAgICB9CiAgICAgIH0KICAgIDwvc2NyaXB0PgogICAgPHNjcmlwdCBuYW1lPSJtYWluIj4KICAgIAkvKiBjb25zdGFudHMgKi8KCiAgICAgIGNvbnN0IEVNUFRZID0gKDEgPDwgMTUpOwoKICAgICAgLyogZ2V0IHBvc2l0aW9uIG51bWJlciBpbiBtYXAgKi8KCiAgICAgIGZ1bmN0aW9uIGdldFBvcyh4LCB5LCB6KSB7CgogICAgICAgIHJldHVybiAoeCA8PCA4KSB8ICh5IDw8IDQpIHwgejsKICAgICAgfQoKICAgICAgLyogZ2V0IGNvbG9yIG51bWJlciAqLwoKICAgICAgZnVuY3Rpb24gZ2V0Q29sb3IocykgewoKICAgICAgICByZXR1cm4gKE51bWJlcignMHgnICsgcy5zdWJzdHIoMSwgMikpIDw8IDE2KSB8IChOdW1iZXIoJzB4JyArIHMuc3Vic3RyKDMsIDIpKSA8PCA4KSB8IE51bWJlcignMHgnICsgcy5zdWJzdHIoNSwgMikpOwogICAgICB9CgogICAgICAvKiBnZXQgc3F1YXJlIG9mIGRpc3RhbmNlIG9mIGEgc2lkZSBvZiBzcXVhcmUgZnJvbSBjYW1lcmEgKi8KCiAgICAgIGZ1bmN0aW9uIGRpc3QoY2FtLCBwbGkpIHsKCiAgICAgICAgdmFyIG1hID0gMDsKCiAgICAgICAgZm9yKHZhciBpIGluIHBsaS5wKSB7CgogICAgICAgICAgbWEgPSBNYXRoLm1heChtYSwgY2FtZXJhLmdldERpc3QocGxpLnBbaV0pKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBtYTsKICAgICAgfQoKICAgICAgLyogY2hlY2sgaWYgcG9pbnQgaXMgaW5zaWRlIGEgcG9seWdvbiAqLwoKICAgICAgZnVuY3Rpb24gaW5zaWRlKHBvaW50LCBwb2x5KSB7CgogICAgICAgICAgdmFyIHggPSBwb2ludC54LCB5ID0gcG9pbnQueTsKCiAgICAgICAgICB2YXIgdnMgPSBwb2x5LnA7CgogICAgICAgICAgdmFyIGluc2lkZSA9IGZhbHNlOwogICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSB2cy5sZW5ndGggLSAxOyBpIDwgdnMubGVuZ3RoOyBqID0gaSsrKSB7CiAgICAgICAgICAgICAgdmFyIHhpID0gdnNbaV0ueCwgeWkgPSB2c1tpXS55OwogICAgICAgICAgICAgIHZhciB4aiA9IHZzW2pdLngsIHlqID0gdnNbal0ueTsKCiAgICAgICAgICAgICAgdmFyIGludGVyc2VjdCA9ICgoeWkgPiB5KSAhPSAoeWogPiB5KSkKICAgICAgICAgICAgICAgICAgJiYgKHggPCAoeGogLSB4aSkgKiAoeSAtIHlpKSAvICh5aiAtIHlpKSArIHhpKTsKICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0KSBpbnNpZGUgPSAhaW5zaWRlOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBpbnNpZGU7CiAgICAgIH07CgogICAgICB2YXIgY2FtZXJhID0gbmV3IENhbWVyYSg5MCwgMik7IC8vIENhbWVyYSBvYmplY3QKCiAgICAgIGNhbWVyYS5yb3RhdGUoLU1hdGguUEkgKiAwLjI1LCAtTWF0aC5QSSAqIDAuMjUpOwoKICAgICAgLyogbWFwIGZvciB0ZXN0aW5nLCB0aGlzIHBhcnQgb2YgY29kZSB3aWxsIGxhdGVyIGJlIHJlcGxhY2VkICovCgogICAgICB2YXIgbWFwID0gbmV3IFVpbnQzMkFycmF5KDQwOTYpOwoKICAgICAgZm9yKHZhciBpID0gMDsgaSA8IDMyNzY4OyBpKyspIG1hcFtpXSA9IEVNUFRZOwoKICAgICAgZm9yKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIGZvcih2YXIgaiA9IDA7IGogPCAxNjsgaisrKSBtYXBbZ2V0UG9zKGksIDAsIGopXSA9IDI1NSA8PCA4OwoKICAgICAgLyogcmVuZGVyICovCgogICAgICB2YXIgcGxhaW5zM0QgPSBbXSwgcHJvamVjdGlvbnMgPSBbXTsKCiAgICAgIC8qIGNoZWNrIGlmIHBsYWNlIGluIHRoZSBtYXAgaXMgZW1wdHkgKi8KCiAgICAgIGZ1bmN0aW9uIGlzRW1wdHkoeCwgeSwgeikgewoKICAgICAgICByZXR1cm4geCA8IDAgfHwgeSA8IDAgfHwgeiA8IDAgfHwgeCA+IDE1IHx8IHkgPiAxNSB8fCB6ID4gMTUgfHwgbWFwW2dldFBvcyh4LCB5LCB6KV0gPT0gRU1QVFk7CiAgICAgIH0KCiAgICAgIC8qIGxlZnQgcGFkICovCgogICAgICBTdHJpbmcucHJvdG90eXBlLmxwYWQgPSBmdW5jdGlvbihuLCBjKSB7CgogICAgICAgIHMgPSAnJzsKCiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IE1hdGgubWF4KG4gLSB0aGlzLmxlbmd0aCwgMCk7IGkrKykgewoKICAgICAgICAgIHMgKz0gJzAnOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHMgKyB0aGlzOwogICAgICB9CgogICAgICAvKiBmdW5jdGlvbiBmb3IgbG9hZGluZyBhIDNibSAoYml0bWFwIGZvcm1hdCBmb3IgOTNEICkgKi8KCiAgICAgIGZ1bmN0aW9uIGxvYWRNYXAobWFwKSB7CgogICAgICAgIHBsYWluczNEID0gW107CgogICAgICAgIGZvcih2YXIgeCA9IDA7IHggPCAxNjsgeCsrKSB7CiAgICAgICAgICBmb3IodmFyIHkgPSAwOyB5IDwgMTY7IHkrKykgewogICAgICAgICAgICBmb3IodmFyIHogPSAwOyB6IDwgMTY7IHorKykgewogICAgICAgICAgICAgIGlmKG1hcFtnZXRQb3MoeCwgeSwgeildICE9IEVNUFRZKSB7CgogICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gJyMnICsgKChtYXBbZ2V0UG9zKHgsIHksIHopXSA+PiAxNikgJiAyNTUpLnRvU3RyaW5nKDE2KS5scGFkKDIsICcwJykgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChtYXBbZ2V0UG9zKHgsIHksIHopXSA+PiA4KSAmIDI1NSkudG9TdHJpbmcoMTYpLmxwYWQoMiwgJzAnKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWFwW2dldFBvcyh4LCB5LCB6KV0gJiAyNTUpLnRvU3RyaW5nKDE2KS5scGFkKDIsICcwJyk7CgogICAgICAgICAgICAgICAgaWYoaXNFbXB0eSh4ICsgMSwgeSwgeikpIHBsYWluczNELnB1c2gobmV3IFBsYWluKAoKICAgICAgICAgICAgICAgICAgbmV3IFBvaW50M0QoeCArIDEsIHkgKyAxLCB6ICsgMSksCiAgICAgICAgICAgICAgICAgIG5ldyBQb2ludDNEKHggKyAxLCB5ICsgMSwgeiksCiAgICAgICAgICAgICAgICAgIG5ldyBQb2ludDNEKHggKyAxLCB5LCB6KSwKICAgICAgICAgICAgICAgICAgbmV3IFBvaW50M0QoeCArIDEsIHksIHogKyAxKSwKCiAgICAgICAgICAgICAgICAgIGNvbG9yLCBuZXcgUG9pbnQzRCh4LCB5LCB6KSwgbmV3IFBvaW50M0QoeCArIDEsIHksIHopCiAgICAgICAgICAgICAgICApKTsKICAgICAgICAgICAgICAgIGlmKGlzRW1wdHkoeCwgeSAtIDEsIHopKSBwbGFpbnMzRC5wdXNoKG5ldyBQbGFpbigKCiAgICAgICAgICAgICAgICAgIG5ldyBQb2ludDNEKHgsIHksIHopLAogICAgICAgICAgICAgICAgICBuZXcgUG9pbnQzRCh4LCB5LCB6ICsgMSksCiAgICAgICAgICAgICAgICAgIG5ldyBQb2ludDNEKHggKyAxLCB5LCB6ICsgMSksCiAgICAgICAgICAgICAgICAgIG5ldyBQb2ludDNEKHggKyAxLCB5LCB6KSwKCiAgICAgICAgICAgICAgICAgIGNvbG9yLCBuZXcgUG9pbnQzRCh4LCB5LCB6KSwgbmV3IFBvaW50M0QoeCwgeSAtIDEsIHopCiAgICAgICAgICAgICAgICApKTsKICAgICAgICAgICAgICAgIGlmKGlzRW1wdHkoeCwgeSwgeiArIDEpKSBwbGFpbnMzRC5wdXNoKG5ldyBQbGFpbigKCiAgICAgICAgICAgICAgICAgIG5ldyBQb2ludDNEKHgsIHkgKyAxLCB6ICsgMSksCiAgICAgICAgICAgICAgICAgIG5ldyBQb2ludDNEKHggKyAxLCB5ICsgMSwgeiArIDEpLAogICAgICAgICAgICAgICAgICBuZXcgUG9pbnQzRCh4ICsgMSwgeSwgeiArIDEpLAogICAgICAgICAgICAgICAgICBuZXcgUG9pbnQzRCh4LCB5LCB6ICsgMSksCgogICAgICAgICAgICAgICAgICBjb2xvciwgbmV3IFBvaW50M0QoeCwgeSwgeiksIG5ldyBQb2ludDNEKHgsIHksIHogKyAxKQogICAgICAgICAgICAgICAgKSk7CiAgICAgICAgICAgICAgICBpZihpc0VtcHR5KHggLSAxLCB5LCB6KSkgcGxhaW5zM0QucHVzaChuZXcgUGxhaW4oCgogICAgICAgICAgICAgICAgICBuZXcgUG9pbnQzRCh4LCB5LCB6KSwKICAgICAgICAgICAgICAgICAgbmV3IFBvaW50M0QoeCwgeSwgeiArIDEpLAogICAgICAgICAgICAgICAgICBuZXcgUG9pbnQzRCh4LCB5ICsgMSwgeiArIDEpLAogICAgICAgICAgICAgICAgICBuZXcgUG9pbnQzRCh4LCB5ICsgMSwgeiksCgogICAgICAgICAgICAgICAgICBjb2xvciwgbmV3IFBvaW50M0QoeCwgeSwgeiksIG5ldyBQb2ludDNEKHggLSAxLCB5LCB6KQogICAgICAgICAgICAgICAgKSk7CiAgICAgICAgICAgICAgICBpZihpc0VtcHR5KHgsIHkgKyAxLCB6KSkgcGxhaW5zM0QucHVzaChuZXcgUGxhaW4oCgogICAgICAgICAgICAgICAgICBuZXcgUG9pbnQzRCh4LCB5ICsgMSwgeiksCiAgICAgICAgICAgICAgICAgIG5ldyBQb2ludDNEKHggKyAxLCB5ICsgMSwgeiksCiAgICAgICAgICAgICAgICAgIG5ldyBQb2ludDNEKHggKyAxLCB5ICsgMSwgeiArIDEpLAogICAgICAgICAgICAgICAgICBuZXcgUG9pbnQzRCh4LCB5ICsgMSwgeiArIDEpLAoKICAgICAgICAgICAgICAgICAgY29sb3IsIG5ldyBQb2ludDNEKHgsIHksIHopLCBuZXcgUG9pbnQzRCh4LCB5ICsgMSwgeikKICAgICAgICAgICAgICAgICkpOwogICAgICAgICAgICAgICAgaWYoaXNFbXB0eSh4LCB5LCB6IC0gMSkpIHBsYWluczNELnB1c2gobmV3IFBsYWluKAoKICAgICAgICAgICAgICAgICAgbmV3IFBvaW50M0QoeCwgeSwgeiksCiAgICAgICAgICAgICAgICAgIG5ldyBQb2ludDNEKHggKyAxLCB5LCB6KSwKICAgICAgICAgICAgICAgICAgbmV3IFBvaW50M0QoeCArIDEsIHkgKyAxLCB6KSwKICAgICAgICAgICAgICAgICAgbmV3IFBvaW50M0QoeCwgeSArIDEsIHopLAoKICAgICAgICAgICAgICAgICAgY29sb3IsIG5ldyBQb2ludDNEKHgsIHksIHopLCBuZXcgUG9pbnQzRCh4LCB5LCB6IC0gMSkKICAgICAgICAgICAgICAgICkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjMTkxOTcwJzsKCiAgICAgIC8qIGZ1bmN0aW9uIGZvciByZW5kZXJpbmcgc2NyZWVuICovCgogICAgICBmdW5jdGlvbiByZW5kZXIoKSB7CgogICAgICAgIHByb2plY3Rpb25zID0gW107CgogICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgV0lEVEgsIEhFSUdIVCk7CiAgICAgICAgb2ZjLmNsZWFyUmVjdCgwLCAwLCBXSURUSCwgSEVJR0hUKTsKCiAgICAgICAgcGxhaW5zM0Quc29ydCgoYSwgYikgPT4gZGlzdChjYW1lcmEsIGIpIC0gZGlzdChjYW1lcmEsIGEpKTsKCiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHBsYWluczNELmxlbmd0aDsgaSsrKSB7CgogICAgICAgICAgZHJhd3BvbHkoLi4ucGxhaW5zM0RbaV0ucC5tYXAoeCA9PiBjYW1lcmEucHJvamVjdCh4KSksIHBsYWluczNEW2ldLmNvbG9yKTsKCiAgICAgICAgICBwcm9qZWN0aW9ucy5wdXNoKG5ldyBQbGFpbiguLi5wbGFpbnMzRFtpXS5wLm1hcCh4ID0+IGNhbWVyYS5wcm9qZWN0KHgpKSwgZGlzdChjYW1lcmEsIHBsYWluczNEW2ldKSwgcGxhaW5zM0RbaV0ucG9zMSwgcGxhaW5zM0RbaV0ucG9zMikpOwogICAgICAgIH0KCiAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIFdJRFRILCBIRUlHSFQpOwoKICAgICAgICBjdHguZHJhd0ltYWdlKG9mc2NyLCAwLCAwKTsKICAgICAgfQoKICAgICAgdmFyIHRpbGVfY29sb3IzZCA9IDI1NTsgLy8gY29sb3Igb2YgdGlsZXMgdG8gYmUgcGxhY2VkCgogICAgICB2YXIga2V5ID0ge307CiAgICAgIHZhciBtb3VzZSA9IHtsZWZ0OiBmYWxzZSwgcmlnaHQ6IGZhbHNlLCB4OiAwLCB5OiAwLCBjb3VudDogMH07CgogICAgICB2YXIgdXBkYXRlM0RCID0gZnVuY3Rpb24oKSB7CgogICAgICAgIC8qIHJvdGF0aW9uIHN0dWZmICovCgogICAgICAgIGlmKGtleVs4N10pIGNhbWVyYS5yb3RhdGUoMCwgLU1hdGguUEkgLyA5MCk7CiAgICAgICAgaWYoa2V5WzgzXSkgY2FtZXJhLnJvdGF0ZSgwLCBNYXRoLlBJIC8gOTApOwogICAgICAgIGlmKGtleVs2OF0pIGNhbWVyYS5yb3RhdGUoLU1hdGguUEkgLyA5MCwgMCk7CiAgICAgICAgaWYoa2V5WzY1XSkgY2FtZXJhLnJvdGF0ZShNYXRoLlBJIC8gOTAsIDApOwoKICAgICAgICAvKiBtb3VzZSBzdHVmZiAqLwoKICAgICAgICBpZigobW91c2UubGVmdCB8fCBtb3VzZS5yaWdodCkgJiYgIW1vdXNlLmNvdW50KSB7CgogICAgICAgICAgdmFyIHBvczEgPSAtMSwgcG9zMiA9IC0xLCBkaSA9IDFlOTsgLy8gcG9zMSA9IHBvc2l0aW9uIG9mIGN1cnJlbnQgYmxvY2ssIHBvczIgPSBwb3NpdGlvbiBvZiBibG9jayB0aGlzIHNpZGUgaXMgZmFjaW5nIHRvd2FyZHMKCiAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgcHJvamVjdGlvbnMubGVuZ3RoOyBpKyspIHsKCiAgICAgICAgICAgIGlmKGluc2lkZShtb3VzZSwgcHJvamVjdGlvbnNbaV0pICYmIHByb2plY3Rpb25zW2ldLmNvbG9yIDwgZGkpIHsKCiAgICAgICAgICAgICAgZGkgPSBwcm9qZWN0aW9uc1tpXS5jb2xvcjsgLy8gY29sb3IgYWN0cyBhcyBkaXN0YW5jZSBoZXJlIChkb24ndCBhc2sgd2h5LCB0aGVyZSdzIG5vIGdvb2QgYW5zd2VyKQoKICAgICAgICAgICAgICBwb3MxID0gcHJvamVjdGlvbnNbaV0ucG9zMTsKICAgICAgICAgICAgICBwb3MyID0gcHJvamVjdGlvbnNbaV0ucG9zMjsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmKHBvczEgIT0gLTEpIHsKCiAgICAgICAgICAgIGlmKG1vdXNlLmxlZnQpIG1hcFtnZXRQb3MocG9zMi54LCBwb3MyLnksIHBvczIueildID0gdGlsZV9jb2xvcjNkOwogICAgICAgICAgICBpZihtb3VzZS5yaWdodCkgbWFwW2dldFBvcyhwb3MxLngsIHBvczEueSwgcG9zMS56KV0gPSBFTVBUWTsKCiAgICAgICAgICAgIG1vdXNlLmNvdW50ID0gMTA7IC8vIG1vdXNlIGNvdW50IHByZXZlbnRzIHVuaW50ZW50aW9uYWwgYWN0aW9ucyBieSBkaXNhYmxpbmcgcGxhY2luZyBhbmQgZGVzdHJveWluZyBmb3IgNTAgbXMKCiAgICAgICAgICAgIGxvYWRNYXAobWFwKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmKG1vdXNlLmNvdW50KSBtb3VzZS5jb3VudC0tOwoKICAgICAgICByZW5kZXIoKTsKICAgICAgfQoKICAgICAgdmFyIGNicjsKCiAgICAgIC8qIGV2ZW50IGxpc3RlbmVycyAqLwogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiBrZXlbZS5rZXlDb2RlXSA9IHRydWUpOwogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsICBlID0+IGtleVtlLmtleUNvZGVdID0gZmFsc2UpOwogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZSA9PiB7CiAgICAgICAgaWYoIWUuYnV0dG9uKSBtb3VzZS5sZWZ0ID0gZmFsc2U7CiAgICAgICAgZWxzZSBtb3VzZS5yaWdodCA9IGZhbHNlOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSk7CiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGUgPT4gewogICAgICAgIGlmKG1vdXNlLnggPCBjYnIubGVmdCB8fCBtb3VzZS54ID4gY2JyLnJpZ2h0IHx8IG1vdXNlLnkgPCBjYnIudG9wIHx8IG1vdXNlLnkgPiBjYnIuYm90dG9tKSByZXR1cm47CiAgICAgICAgaWYoIWUuYnV0dG9uKSBtb3VzZS5sZWZ0ID0gdHJ1ZTsKICAgICAgICBlbHNlIG1vdXNlLnJpZ2h0ID0gdHJ1ZTsKICAgICAgfSk7CiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGUgPT4gewoKICAgICAgICBjYnIgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIGZvciBtb3VzZSBsb2NhdGlvbgogICAgICAgIG1vdXNlLnggPSBlLnBhZ2VYIC0gY2JyLmxlZnQ7CiAgICAgICAgbW91c2UueSA9IGUucGFnZVkgLSBjYnIudG9wOwogICAgICB9KTsKICAgICAgY2FudmFzLm9uY29udGV4dG1lbnUgPSBlID0+IGZhbHNlOyAvLyBjYXVzZSByaWdodCBjbGljayBpcyB1c2VkIGZvciBkZXN0cm95aW5nIGJsb2NrcwoKCiAgICAgIC8qCgogICAgICBFWFBPUlRTOgoKICAgICAgLSB1cGRhdGUzREIoKSwgdXNlIGl0IGluIHNldEludGVydmFsCiAgICAgIC0gY2FtZXJhLnNldEZvdihhbmdsZSkKICAgICAgLSBjYW1lcmEuZGlzdCA9IGRpc3RhbmNlIGZyb20gbW9kZWwKICAgICAgLSBjYW1lcmEudG9wID0geS1wb3NpdGlvbiBvZiB0aGUgbG93ZXN0IGxheWVyIG9mIG1hcAogICAgICAtIGxvYWRNYXAoVWludDMyQXJyYXkpID0gbG9hZCBhIG1hcCBpbnRvIHRoZSBlZGl0b3IKICAgICAgLSB0aWxlX2NvbG9yM2QgLSBhIG51bWJlciByZXByZXNlbnRpbmcgY3VycmVudCBmaWxsIGNvbG9yCiAgICAgIC0gZ2V0Q29sb3IoaHRtbCBjb2xvciBjb2RlKSAtIHJldHVybnMgYSBudW1iZXIgcHJlc2VudGluZyBnaXZlbiBjb2xvcgoKICAgICAgSU1QT1JUQU5UOgoKICAgICAgLSB3aGVuIHByb2dyYW0gbG9hZHMsIGl0IGZpbmRzIGEgY2FudmFzIGVsZW1lbnQgd2l0aCBpZCA9ICJ2b3hlbHNjcmVlbiIsCiAgICAgICAgbWFrZSBzdXJlIHRvIGhhdmUgdGhhdCBlbGVtZW50IHNvbWV3aGVyZSBiZWZvcmUgcnVubmluZyBwcm9ncmFtCgogICAgICAqLwoKICAgIDwvc2NyaXB0PgogICAgPHNjcmlwdCBuYW1lPSJhcHAiPgogICAgICBzZXRJbnRlcnZhbCh1cGRhdGUzREIsIDEwKTsKICAgICAgbG9hZE1hcChtYXApOwoKICAgICAgdmFyIHNjID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nob3dfY29sb3InKTsKCiAgICAgIHZhciByZ2Jjb2wgPSBbMCwgMCwgMjU1XTsKCiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWQnKS5vbmlucHV0ID0gZnVuY3Rpb24oZSkgewoKICAgICAgICByZ2Jjb2xbMF0gPSBOdW1iZXIoZS50YXJnZXQudmFsdWUpOwoKICAgICAgICB0aWxlX2NvbG9yM2QgPSB0aWxlX2NvbG9yM2QgJiB+KDI1NSA8PCAxNikgfCAocmdiY29sWzBdIDw8IDE2KTsKCiAgICAgICAgc2Muc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYignICsgcmdiY29sLmpvaW4oJywgJykgKyAnKSc7CiAgICAgIH0KICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dyZWVuJykub25pbnB1dCA9IGZ1bmN0aW9uKGUpIHsKCiAgICAgICAgcmdiY29sWzFdID0gTnVtYmVyKGUudGFyZ2V0LnZhbHVlKTsKCiAgICAgICAgdGlsZV9jb2xvcjNkID0gdGlsZV9jb2xvcjNkICYgfigyNTUgPDwgOCkgfCAocmdiY29sWzFdIDw8IDgpOwoKICAgICAgICBzYy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiKCcgKyByZ2Jjb2wuam9pbignLCAnKSArICcpJzsKICAgICAgfQogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmx1ZScpLm9uaW5wdXQgPSBmdW5jdGlvbihlKSB7CgogICAgICAgIHJnYmNvbFsyXSA9IE51bWJlcihlLnRhcmdldC52YWx1ZSk7CgogICAgICAgIHRpbGVfY29sb3IzZCA9IHRpbGVfY29sb3IzZCAmIH4yNTUgfCByZ2Jjb2xbMl07CgogICAgICAgIHNjLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2IoJyArIHJnYmNvbC5qb2luKCcsICcpICsgJyknOwogICAgICB9CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb3YnKS5vbmlucHV0ID0gZnVuY3Rpb24oZSkgewoKICAgICAgICBjYW1lcmEuc2V0Rm92KE51bWJlcihlLnRhcmdldC52YWx1ZSkpOwogICAgICB9CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXN0Jykub25pbnB1dCA9IGZ1bmN0aW9uKGUpIHsKCiAgICAgICAgY2FtZXJhLmRpc3QgPSBOdW1iZXIoZS50YXJnZXQudmFsdWUpOwogICAgICB9CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd5cG9zJykub25pbnB1dCA9IGZ1bmN0aW9uKGUpIHsKCiAgICAgICAgY2FtZXJhLnRvcCA9IE51bWJlcihlLnRhcmdldC52YWx1ZSk7CiAgICAgIH0KCiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzYXZlJykub25jbGljayA9IGZ1bmN0aW9uKCkgewogICAgICAJcGFyZW50LiRwcm9tcHQoIkVudGVyIGRlc2lyZWQgZmlsZW5hbWUsIHRoZW4gc2VsZWN0IGZvbGRlciB3aGVyZSB5b3Ugd2FudCBpdCBzYXZlZC4iLCBmdW5jdGlvbihhLCBmbmFtZSkgewogICAgICAJICBpZighYSkgcmV0dXJuOwogICAgICAgICAgcGFyZW50LiRleHBsb3JlcignYS9ldGMvM0RCdWlsZGVyL21vZGVscy8nLCB7YnJvd3NlOiB0cnVlLCBleHBsb3JlcjogdHJ1ZSwgb25jbG9zZTogZnVuY3Rpb24ob2ssIGZpbGUpIHsKICAgICAgICAgICAgaWYgKG9rKSB7CiAgICAgICAgICAgICAgdmFyIHJkID0gJyc7CiAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IDQwOTY7IGkrKykgcmQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgobWFwW2ldID4+IDI0KSAmIDI1NSkgKyAgU3RyaW5nLmZyb21DaGFyQ29kZSgobWFwW2ldID4+IDE2KSAmIDI1NSkgKyAgU3RyaW5nLmZyb21DaGFyQ29kZSgobWFwW2ldID4+IDgpICYgMjU1KSArICBTdHJpbmcuZnJvbUNoYXJDb2RlKChtYXBbaV0pICYgMjU1KTsKICAgICAgICAgICAgICBwYXJlbnQuJGRiLnNldCgoZmlsZSArIGZuYW1lKS5zcGxpdCgnLycpLnNsaWNlKDEpLmZpbHRlcih4ID0+IHghPScnKS5qb2luKCcvJyksIHJkKTsKICAgICAgICAgICAgICBzZXRUaW1lb3V0KHBhcmVudC4kZXhwbG9yZXIucmVmcmVzaCwgNTAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgfX0pOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcGVuJykub25jbGljayA9IGZ1bmN0aW9uKCkgewogICAgICAJcGFyZW50LiRleHBsb3JlcignYS9ldGMvM0RCdWlsZGVyL21vZGVscy8nLCB7YnJvd3NlOiB0cnVlLCBleHBsb3JlcjogdHJ1ZSwgb25jbG9zZTogZnVuY3Rpb24ob2ssIGZpbGUpIHsKCQkgIGlmIChvaykgewogICAgCQlwYXJlbnQuJGRiLmdldFJhdyhmaWxlLnNsaWNlKDMpLCBhc3luYyBmdW5jdGlvbihhLCByZCkgewogICAgICAJCQlmb3IodmFyIGkgPSAwOyBpIDwgNDA5NjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICBtYXBbaV0gPSAocmQuY2hhckF0KGkgKiA0KSA8PCAyNCkgfCAocmQuY2hhckNvZGVBdChpICogNCArIDEpIDw8IDE2KSAgfCAocmQuY2hhckNvZGVBdChpICogNCArIDIpIDw8IDgpICB8IHJkLmNoYXJDb2RlQXQoaSAqIDQgKyAzKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGxvYWRNYXAobWFwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgCQl9KTsKICAJCSAgfQoJCX19KTsKICAgICAgfQogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xlYXInKS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7CiAgICAgIAogICAgICAJICBmb3IodmFyIGkgPSAwOyBpIDwgMzI3Njg7IGkrKykgbWFwW2ldID0gRU1QVFk7CgkgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykgZm9yKHZhciBqID0gMDsgaiA8IDE2OyBqKyspIG1hcFtnZXRQb3MoaSwgMCwgaildID0gMjU1IDw8IDg7CiAgICAgICAgICBsb2FkTWFwKG1hcCk7CiAgICAgIH0KICAgICAgCiAgICAgIHBhcmVudC4kd2luZG93LmN1cnJlbnQuY2hhbmdlU2l6ZSh7d2lkdGg6IDQ4NiwgaGVpZ2h0OiA3NDJ9KTsKICAgICAgcGFyZW50LiR3aW5kb3cuY3VycmVudC5jaGFuZ2VUaXRsZSgiM0QgQnVpbGRlciIpOwogICAgICBwYXJlbnQuJHdpbmRvdy5jdXJyZW50LmNoYW5nZUljb24oIi9jL2ZpbGVzL2ltYWdlcy9pY29ucy9ib21iLnBuZyIpOwogICAgPC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==";
var application_init = "bGUuX2FwcHNbIkJ1aWxkM0QiXSA9IHsKICBuYW1lOiAiM0RCdWlsZGVyIiwKICBjYXRoZWdvcmllczogIkdyYXBoaWNzIiwKICBpY29uOiAiL2MvZmlsZXMvaW1hZ2VzL2ljb25zL2JvbWIucG5nIiwKICBleGVjOiAoKT0+ICRleGUoImlmcmFtZSAvYS9ldGMvM0RCdWlsZGVyL2FwcC5odG1sIikKfQ==";

/* create files and folders */

$db.set("etc/3DBuilder/models/README.txt", "You can save your models here.");
$db.set("etc/3DBuilder/app.html", atob(application_base64));
$db.set("boot/Build3D_init.js", atob(application_init));
localStorage.setItem('desktop/Build3D.lnk42', '{"exe":"Build3D"}');

/* refresh explorer and run init for the app */

setTimeout($explorer.refresh, 500);
$exe("js /a/boot/Build3D_init.js");